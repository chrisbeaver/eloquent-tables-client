var eloquentTables = (function () {
'use strict';

var tables$1 = document.getElementsByClassName('eloquent-table');

var headers = [].slice.call(tables$1[0].tHead.querySelectorAll('th')).map(function (header) {
    return header.innerHTML;
});

// export let paginator = document.createElement('div');

var total_count = { value: 0,
    set: function set(value) {
        this.value = value;
    }
};

var rows = {
    collection: null,
    set: function set(value) {
        this.collection = value;
    }
};

var config = {
    tableRows: 10,
    setTableRows: function setTableRows(value) {
        this.tableRows = value;
    }
};

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get$1 = function get$1(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get$1(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

















var set$1 = function set$1(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set$1(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

/**
 * Fired on AJAX response to construct paginated results.
 *
 */


var Paginator = function () {
    function Paginator(elem, total) {
        classCallCheck(this, Paginator);

        this.elem = elem;
        this.total = total;
    }

    createClass(Paginator, [{
        key: 'calcPages',
        value: function calcPages() {
            return this.total / config.tableRows;
        }
    }, {
        key: 'buildHTML',
        value: function buildHTML() {

            var node = document.createElement('div');
            node.className = 'paginator';
            // wrapper.appendChild(node);
            node.innerHTML = total_count.value;
            this.elem.appendChild(node);
        }
    }, {
        key: 'pages',
        get: function get() {
            return this.calcPages();
        }
    }]);
    return Paginator;
}();

var Header = function () {
    function Header(elem) {
        classCallCheck(this, Header);

        this.elem = elem; // HTML Element
        this.columns = this.load();
    }

    createClass(Header, [{
        key: 'load',
        value: function load() {
            return [].slice.call(this.elem.querySelectorAll('th')).map(function (header) {
                return header.innerHTML;
            });
        }
    }]);
    return Header;
}();

/**
 * AJAX Listener to build table with data returned 
 * from server.
 *
 * @param  {Json} payload a server response
 */
function populateTable(payload) {
    // console.log(tables);
    var elem = tables$1[0].getElementsByTagName('tbody')[0];
    payload.data.forEach(function (data) {

        var row = elem.insertRow(-1);
        // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell(3);

        // Add some text to the new cells:
        cell1.innerHTML = data.id;
        cell2.innerHTML = data.company.name;
        cell3.innerHTML = data.name;
        cell4.innerHTML = data.price;
    });
    // console.log(paginator);
    total_count.set(payload.count);
    var paginator = new Paginator(elem, total_count.value);
    paginator.buildHTML();
}

/**
 * AJAX Request to server to get Table data.
 */


/**
 * Call back function fired on AJAX result.
 */
function ajaxListener() {
    // console.log(JSON.parse(this.responseText));
    var elem = tables$1[0]; //.getElementsByTagName('tbody')[0];
    // let table = new Table(elem, rows.set(JSON.parse(this.responseText)));
    // table.load();
    rows.set(JSON.parse(this.responseText));
    populateTable(rows.collection);
}

var Table = function () {
    function Table(elem) {
        classCallCheck(this, Table);

        this.table = elem; // HTML Table Element
        this.parent = this.initialize();
        this.header = this._loadHeader();
        console.log(this.header.columns);
    }

    createClass(Table, [{
        key: 'load',
        value: function load() {

            var r = new XMLHttpRequest();
            r.open('POST', this.table.getAttribute('data-target'), true);
            r.setRequestHeader('X-CSRF-TOKEN', '{{ csrf_token() }}');
            r.setRequestHeader('take', '10');
            r.setRequestHeader('skip', '20');
            r.setRequestHeader('search', 'Wiza');
            r.addEventListener('load', ajaxListener);
            r.onreadystatechange = function () {
                if (r.readyState != 4 || r.status != 200) return;
            };
            r.send();
        }
    }, {
        key: 'initialize',
        value: function initialize() {
            // Put wrapper around table.
            var wrapper = document.createElement('div');
            wrapper.className = 'table-wrapper';
            var table = this.table;
            table.parentElement.insertBefore(wrapper, table);
            wrapper.appendChild(table);
            return wrapper;
        }
    }, {
        key: '_loadHeader',
        value: function _loadHeader() {
            return new Header(this.table.tHead);
        }
    }]);
    return Table;
}();

/**
 * Construct basic framework for creating a table.
 */
function initializeTable() {
    var wrapper = document.createElement('div');
    wrapper.className = 'table-wrapper';
    var table = tables$1[0];

    document.body.insertBefore(wrapper, table);
    wrapper.appendChild(table);
}

// import { ajaxRequest } from './modules/ajaxRequest';

initializeTable();
var elem = tables$1[0];
var table = new Table(elem);
table.load();

return tables$1;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
