(function () {
'use strict';

var tables = document.getElementsByClassName('eloquent-table');

var headers = [].slice.call(tables[0].tHead.querySelectorAll('th')).map(function (header) {
    return header.innerHTML;
});

var paginator = document.createElement('div');

var total_count = { value: 0,
    set: function set(value) {
        this.value = value;
    }
};

var rows = {
    collection: null,
    set: function set(value) {
        this.collection = value;
    }
};

var config = {
    tableRows: 10,
    setTableRows: function setTableRows(value) {
        this.tableRows = value;
    }
};

/**
 * Construct basic framework for creating a table.
 */
function initializeTable() {
    var wrapper = document.createElement('div');
    wrapper.className = 'table-wrapper';
    var table = tables[0];

    document.body.insertBefore(wrapper, table);
    wrapper.appendChild(table);

    // paginator = document.createElement("div");
    paginator.className = 'paginator';
    wrapper.appendChild(paginator);
}

/**
 * Fired on AJAX response to construct paginated results.
 *
 */
function buildPaginator() {
    // console.log('Count: ' + total_count);
    paginator.innerHTML = total_count.value;
    var totalPages = total_count.value / config.tableRows;
    alert(totalPages);
}

/**
 * AJAX Listener to build table with data returned 
 * from server.
 *
 * @param  {Json} payload a server response
 */
function populateTable(payload) {
    // console.log(tables);
    payload.data.forEach(function (data) {

        var row = tables[0].getElementsByTagName('tbody')[0].insertRow(-1);
        // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell(3);

        // Add some text to the new cells:
        cell1.innerHTML = data.id;
        cell2.innerHTML = data.company.name;
        cell3.innerHTML = data.name;
        cell4.innerHTML = data.price;
    });
    // console.log(paginator);
    total_count.set(payload.count);
    buildPaginator();
}

/**
 * AJAX Request to server to get Table data.
 */
function ajaxRequest() {
    var r = new XMLHttpRequest();

    r.open('POST', tables[0].getAttribute('data-target'), true);
    r.setRequestHeader('X-CSRF-TOKEN', '{{ csrf_token() }}');
    r.setRequestHeader('take', '10');
    r.setRequestHeader('skip', '5');
    r.setRequestHeader('search', 'Wiza');
    r.addEventListener('load', ajaxListener);
    r.onreadystatechange = function () {
        if (r.readyState != 4 || r.status != 200) return;
        // console.log(r.responseText);
    };
    r.send('take=1');
}

/**
 * Call back function fired on AJAX result.
 */
function ajaxListener() {
    // console.log(JSON.parse(this.responseText));
    rows.set(JSON.parse(this.responseText));
    // console.log(rows.collection);
    populateTable(rows.collection);
}

initializeTable();
ajaxRequest();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2dsb2JhbHMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2luaXRpYWxpemVUYWJsZS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvcGFnaW5hdG9yLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9wb3B1bGF0ZVRhYmxlLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9hamF4UmVxdWVzdC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCB0YWJsZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdlbG9xdWVudC10YWJsZScpO1xuXG5leHBvcnQgbGV0IGhlYWRlcnMgPSBbXS5zbGljZVxuICAgIC5jYWxsKHRhYmxlc1swXS50SGVhZC5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpKVxuICAgIC5tYXAoZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHJldHVybiBoZWFkZXIuaW5uZXJIVE1MO1xuICAgIH0pO1xuXG5leHBvcnQgbGV0IHBhZ2luYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG5leHBvcnQgbGV0IHRvdGFsX2NvdW50ID0geyB2YWx1ZTogMCxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuIFx0fVxufTtcblxuZXhwb3J0IGxldCByb3dzID0geyBcblx0Y29sbGVjdGlvbjogbnVsbCxcblx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHRoaXMuY29sbGVjdGlvbiA9IHZhbHVlO1xuXHR9XG59O1xuXG5leHBvcnQgbGV0IGNvbmZpZyA9IHtcbiAgICB0YWJsZVJvd3M6IDEwLFxuICAgIHNldFRhYmxlUm93czogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy50YWJsZVJvd3MgPSB2YWx1ZTsgfVxufSIsImltcG9ydCB7IHRhYmxlcywgcGFnaW5hdG9yIH0gZnJvbSAnLi4vZ2xvYmFscyc7XG4vKipcbiAqIENvbnN0cnVjdCBiYXNpYyBmcmFtZXdvcmsgZm9yIGNyZWF0aW5nIGEgdGFibGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplVGFibGUoKVxue1xuICAgIGxldCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgd3JhcHBlci5jbGFzc05hbWUgPSAndGFibGUtd3JhcHBlcic7XG4gICAgbGV0IHRhYmxlID0gdGFibGVzWzBdO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHRhYmxlKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRhYmxlKTtcblxuICAgIC8vIHBhZ2luYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcGFnaW5hdG9yLmNsYXNzTmFtZSA9ICdwYWdpbmF0b3InO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQocGFnaW5hdG9yKTtcbn0iLCJpbXBvcnQgeyBwYWdpbmF0b3IsIHRvdGFsX2NvdW50LCBjb25maWcgfSBmcm9tICcuLi9nbG9iYWxzJztcbi8qKlxuICogRmlyZWQgb24gQUpBWCByZXNwb25zZSB0byBjb25zdHJ1Y3QgcGFnaW5hdGVkIHJlc3VsdHMuXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRQYWdpbmF0b3IoKVxue1xuICAgIC8vIGNvbnNvbGUubG9nKCdDb3VudDogJyArIHRvdGFsX2NvdW50KTtcbiAgICBwYWdpbmF0b3IuaW5uZXJIVE1MID0gdG90YWxfY291bnQudmFsdWU7XG4gICAgbGV0IHRvdGFsUGFnZXMgPSB0b3RhbF9jb3VudC52YWx1ZSAvIGNvbmZpZy50YWJsZVJvd3M7XG4gICAgYWxlcnQodG90YWxQYWdlcyk7XG59IiwiaW1wb3J0IHsgdGFibGVzLCB0b3RhbF9jb3VudCB9IGZyb20gJy4uL2dsb2JhbHMnO1xuaW1wb3J0IHsgYnVpbGRQYWdpbmF0b3IgfSBmcm9tICcuL3BhZ2luYXRvcic7XG4vKipcbiAqIEFKQVggTGlzdGVuZXIgdG8gYnVpbGQgdGFibGUgd2l0aCBkYXRhIHJldHVybmVkIFxuICogZnJvbSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtICB7SnNvbn0gcGF5bG9hZCBhIHNlcnZlciByZXNwb25zZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9wdWxhdGVUYWJsZShwYXlsb2FkKVxue1xuICAgIC8vIGNvbnNvbGUubG9nKHRhYmxlcyk7XG4gICAgcGF5bG9hZC5kYXRhLmZvckVhY2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHJvdyA9IHRhYmxlc1swXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGJvZHknKVswXS5pbnNlcnRSb3coLTEpO1xuICAgICAgICAvLyBJbnNlcnQgbmV3IGNlbGxzICg8dGQ+IGVsZW1lbnRzKSBhdCB0aGUgMXN0IGFuZCAybmQgcG9zaXRpb24gb2YgdGhlIFwibmV3XCIgPHRyPiBlbGVtZW50OlxuICAgICAgICB2YXIgY2VsbDEgPSByb3cuaW5zZXJ0Q2VsbCgwKTtcbiAgICAgICAgdmFyIGNlbGwyID0gcm93Lmluc2VydENlbGwoMSk7XG4gICAgICAgIHZhciBjZWxsMyA9IHJvdy5pbnNlcnRDZWxsKDIpO1xuICAgICAgICB2YXIgY2VsbDQgPSByb3cuaW5zZXJ0Q2VsbCgzKTtcblxuICAgICAgICAvLyBBZGQgc29tZSB0ZXh0IHRvIHRoZSBuZXcgY2VsbHM6XG4gICAgICAgIGNlbGwxLmlubmVySFRNTCA9IGRhdGEuaWQ7XG4gICAgICAgIGNlbGwyLmlubmVySFRNTCA9IGRhdGEuY29tcGFueS5uYW1lO1xuICAgICAgICBjZWxsMy5pbm5lckhUTUwgPSBkYXRhLm5hbWU7XG4gICAgICAgIGNlbGw0LmlubmVySFRNTCA9IGRhdGEucHJpY2U7XG4gICAgfSk7XG4gICAgLy8gY29uc29sZS5sb2cocGFnaW5hdG9yKTtcbiAgICB0b3RhbF9jb3VudC5zZXQocGF5bG9hZC5jb3VudCk7XG4gICAgYnVpbGRQYWdpbmF0b3IoKTsgXG59IiwiaW1wb3J0IHsgdGFibGVzLCByb3dzIH0gZnJvbSAnLi4vZ2xvYmFscyc7XG5pbXBvcnQgeyBwb3B1bGF0ZVRhYmxlIH0gZnJvbSAnLi9wb3B1bGF0ZVRhYmxlJ1xuLyoqXG4gKiBBSkFYIFJlcXVlc3QgdG8gc2VydmVyIHRvIGdldCBUYWJsZSBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWpheFJlcXVlc3QoKVxue1xuICAgIGxldCByID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgXG4gICAgci5vcGVuKCdQT1NUJywgdGFibGVzWzBdLmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKSwgdHJ1ZSk7XG4gICAgci5zZXRSZXF1ZXN0SGVhZGVyKCdYLUNTUkYtVE9LRU4nLCAne3sgY3NyZl90b2tlbigpIH19Jyk7XG4gICAgci5zZXRSZXF1ZXN0SGVhZGVyKCd0YWtlJywgJzEwJyk7XG4gICAgci5zZXRSZXF1ZXN0SGVhZGVyKCdza2lwJywgJzUnKTtcbiAgICByLnNldFJlcXVlc3RIZWFkZXIoJ3NlYXJjaCcsICdXaXphJyk7XG4gICAgci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgYWpheExpc3RlbmVyKTtcbiAgICByLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHIucmVhZHlTdGF0ZSAhPSA0IHx8IHIuc3RhdHVzICE9IDIwMCkgcmV0dXJuOyBcbiAgICAgICAgLy8gY29uc29sZS5sb2coci5yZXNwb25zZVRleHQpO1xuICAgIH07XG4gICAgci5zZW5kKCd0YWtlPTEnKTtcbn1cblxuLyoqXG4gKiBDYWxsIGJhY2sgZnVuY3Rpb24gZmlyZWQgb24gQUpBWCByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhamF4TGlzdGVuZXIoKVxue1xuICAgIC8vIGNvbnNvbGUubG9nKEpTT04ucGFyc2UodGhpcy5yZXNwb25zZVRleHQpKTtcbiAgICByb3dzLnNldChKU09OLnBhcnNlKHRoaXMucmVzcG9uc2VUZXh0KSk7XG4gICAgLy8gY29uc29sZS5sb2cocm93cy5jb2xsZWN0aW9uKTtcbiAgICBwb3B1bGF0ZVRhYmxlKHJvd3MuY29sbGVjdGlvbik7XG59IiwiaW1wb3J0IHsgaW5pdGlhbGl6ZVRhYmxlIH0gZnJvbSAnLi9tb2R1bGVzL2luaXRpYWxpemVUYWJsZSc7XG5pbXBvcnQgeyBhamF4UmVxdWVzdCB9IGZyb20gJy4vbW9kdWxlcy9hamF4UmVxdWVzdCc7XG5cbmluaXRpYWxpemVUYWJsZSgpO1xuYWpheFJlcXVlc3QoKTtcbiJdLCJuYW1lcyI6WyJ0YWJsZXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJoZWFkZXJzIiwic2xpY2UiLCJjYWxsIiwidEhlYWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWFwIiwiaGVhZGVyIiwiaW5uZXJIVE1MIiwicGFnaW5hdG9yIiwiY3JlYXRlRWxlbWVudCIsInRvdGFsX2NvdW50IiwidmFsdWUiLCJyb3dzIiwiY29sbGVjdGlvbiIsImNvbmZpZyIsInRhYmxlUm93cyIsImluaXRpYWxpemVUYWJsZSIsIndyYXBwZXIiLCJjbGFzc05hbWUiLCJ0YWJsZSIsImJvZHkiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImJ1aWxkUGFnaW5hdG9yIiwidG90YWxQYWdlcyIsInBvcHVsYXRlVGFibGUiLCJwYXlsb2FkIiwiZGF0YSIsImZvckVhY2giLCJyb3ciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydFJvdyIsImNlbGwxIiwiaW5zZXJ0Q2VsbCIsImNlbGwyIiwiY2VsbDMiLCJjZWxsNCIsImlkIiwiY29tcGFueSIsIm5hbWUiLCJwcmljZSIsInNldCIsImNvdW50IiwiYWpheFJlcXVlc3QiLCJyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiZ2V0QXR0cmlidXRlIiwic2V0UmVxdWVzdEhlYWRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhamF4TGlzdGVuZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwic2VuZCIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCJdLCJtYXBwaW5ncyI6Ijs7O0FBQU8sSUFBSUEsU0FBU0MsU0FBU0Msc0JBQVQsQ0FBZ0MsZ0JBQWhDLENBQWI7O0FBRVAsQUFBTyxJQUFJQyxVQUFVLEdBQUdDLEtBQUgsQ0FDaEJDLElBRGdCLENBQ1hMLE9BQU8sQ0FBUCxFQUFVTSxLQUFWLENBQWdCQyxnQkFBaEIsQ0FBaUMsSUFBakMsQ0FEVyxFQUVoQkMsR0FGZ0IsQ0FFWixVQUFTQyxNQUFULEVBQWlCO1dBQ1hBLE9BQU9DLFNBQWQ7Q0FIYSxDQUFkOztBQU1QLEFBQU8sSUFBSUMsWUFBWVYsU0FBU1csYUFBVCxDQUF1QixLQUF2QixDQUFoQjs7QUFFUCxBQUFPLElBQUlDLGNBQWMsRUFBRUMsT0FBTyxDQUFUO1NBQ2hCLGFBQVNBLEtBQVQsRUFBZ0I7YUFDbEJBLEtBQUwsR0FBYUEsS0FBYjs7Q0FGSzs7QUFNUCxBQUFPLElBQUlDLE9BQU87Z0JBQ0wsSUFESztTQUVaLGFBQVNELEtBQVQsRUFBZ0I7YUFDZkUsVUFBTCxHQUFrQkYsS0FBbEI7O0NBSEs7O0FBT1AsQUFBTyxJQUFJRyxTQUFTO2VBQ0wsRUFESztrQkFFRixzQkFBU0gsS0FBVCxFQUFnQjthQUFPSSxTQUFMLEdBQWlCSixLQUFqQjs7Q0FGN0I7O0FDdEJQOzs7QUFHQSxBQUFPLFNBQVNLLGVBQVQsR0FDUDtRQUNRQyxVQUFVbkIsU0FBU1csYUFBVCxDQUF1QixLQUF2QixDQUFkO1lBQ1FTLFNBQVIsR0FBb0IsZUFBcEI7UUFDSUMsUUFBUXRCLE9BQU8sQ0FBUCxDQUFaOzthQUVTdUIsSUFBVCxDQUFjQyxZQUFkLENBQTJCSixPQUEzQixFQUFvQ0UsS0FBcEM7WUFDUUcsV0FBUixDQUFvQkgsS0FBcEI7OztjQUdVRCxTQUFWLEdBQXNCLFdBQXRCO1lBQ1FJLFdBQVIsQ0FBb0JkLFNBQXBCOzs7QUNkSjs7OztBQUlBLEFBQU8sU0FBU2UsY0FBVCxHQUNQOztjQUVjaEIsU0FBVixHQUFzQkcsWUFBWUMsS0FBbEM7UUFDSWEsYUFBYWQsWUFBWUMsS0FBWixHQUFvQkcsT0FBT0MsU0FBNUM7VUFDTVMsVUFBTjs7O0FDUko7Ozs7OztBQU1BLEFBQU8sU0FBU0MsYUFBVCxDQUF1QkMsT0FBdkIsRUFDUDs7WUFFWUMsSUFBUixDQUFhQyxPQUFiLENBQXFCLFVBQVNELElBQVQsRUFBZTs7WUFFNUJFLE1BQU1oQyxPQUFPLENBQVAsRUFBVWlDLG9CQUFWLENBQStCLE9BQS9CLEVBQXdDLENBQXhDLEVBQTJDQyxTQUEzQyxDQUFxRCxDQUFDLENBQXRELENBQVY7O1lBRUlDLFFBQVFILElBQUlJLFVBQUosQ0FBZSxDQUFmLENBQVo7WUFDSUMsUUFBUUwsSUFBSUksVUFBSixDQUFlLENBQWYsQ0FBWjtZQUNJRSxRQUFRTixJQUFJSSxVQUFKLENBQWUsQ0FBZixDQUFaO1lBQ0lHLFFBQVFQLElBQUlJLFVBQUosQ0FBZSxDQUFmLENBQVo7OztjQUdNMUIsU0FBTixHQUFrQm9CLEtBQUtVLEVBQXZCO2NBQ005QixTQUFOLEdBQWtCb0IsS0FBS1csT0FBTCxDQUFhQyxJQUEvQjtjQUNNaEMsU0FBTixHQUFrQm9CLEtBQUtZLElBQXZCO2NBQ01oQyxTQUFOLEdBQWtCb0IsS0FBS2EsS0FBdkI7S0FiSjs7Z0JBZ0JZQyxHQUFaLENBQWdCZixRQUFRZ0IsS0FBeEI7Ozs7QUN6Qko7OztBQUdBLEFBQU8sU0FBU0MsV0FBVCxHQUNQO1FBQ1FDLElBQUksSUFBSUMsY0FBSixFQUFSOztNQUVFQyxJQUFGLENBQU8sTUFBUCxFQUFlakQsT0FBTyxDQUFQLEVBQVVrRCxZQUFWLENBQXVCLGFBQXZCLENBQWYsRUFBc0QsSUFBdEQ7TUFDRUMsZ0JBQUYsQ0FBbUIsY0FBbkIsRUFBbUMsb0JBQW5DO01BQ0VBLGdCQUFGLENBQW1CLE1BQW5CLEVBQTJCLElBQTNCO01BQ0VBLGdCQUFGLENBQW1CLE1BQW5CLEVBQTJCLEdBQTNCO01BQ0VBLGdCQUFGLENBQW1CLFFBQW5CLEVBQTZCLE1BQTdCO01BQ0VDLGdCQUFGLENBQW1CLE1BQW5CLEVBQTJCQyxZQUEzQjtNQUNFQyxrQkFBRixHQUF1QixZQUFZO1lBQzNCUCxFQUFFUSxVQUFGLElBQWdCLENBQWhCLElBQXFCUixFQUFFUyxNQUFGLElBQVksR0FBckMsRUFBMEM7O0tBRDlDO01BSUVDLElBQUYsQ0FBTyxRQUFQOzs7Ozs7QUFNSixBQUFPLFNBQVNKLFlBQVQsR0FDUDs7U0FFU1QsR0FBTCxDQUFTYyxLQUFLQyxLQUFMLENBQVcsS0FBS0MsWUFBaEIsQ0FBVDs7a0JBRWM3QyxLQUFLQyxVQUFuQjs7O0FDM0JKRztBQUNBMkI7OyJ9
