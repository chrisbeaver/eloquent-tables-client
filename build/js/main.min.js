(function (exports) {
'use strict';

/**
 * Construct basic framework for creating a table.
 */
function initializeTable()
{
    let wrapper = document.createElement("div");
    wrapper.className = "table-wrapper";
    let table = tables[0];
    
    document.body.insertBefore(wrapper, table);
    wrapper.appendChild(table);

    paginator = document.createElement("div");
    paginator.className = "paginator";
    wrapper.appendChild(paginator);
}

/**
 * Fired on AJAX response to construct paginated results.
 *
 */
function buildPaginator(paginator)
{
    console.log("Count: " + total_count);
    paginator.innerHTML = total_count;
}

/**
 * AJAX Listener to build table with data returned 
 * from server.
 *
 * @param  {Json} payload a server response
 */
function populateTable(payload)
{
    console.log(payload);
    payload.data.forEach(function(data) {
        
        var row = tables.getElementsByTagName('tbody')[0].insertRow(-1);
        // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell(3);

        // Add some text to the new cells:
        cell1.innerHTML = data.id;
        cell2.innerHTML = data.company.name;
        cell3.innerHTML = data.name;
        cell4.innerHTML = data.price;
    });
    console.log(paginator);
    total_count = payload.count;
    buildPaginator(); 
}

/**
 * AJAX Request to server to get Table data.
 */
function ajaxRequest()
{
    let r = new XMLHttpRequest();
    
    r.open("POST", tables[0].getAttribute("data-target"), true);
    r.setRequestHeader("X-CSRF-TOKEN", "{{ csrf_token() }}");
    r.setRequestHeader("take", "10");
    r.setRequestHeader("skip", "5");
    r.setRequestHeader("search", "Wiza");
    r.addEventListener("load", ajaxListener);
    r.onreadystatechange = function () {
        if (r.readyState != 4 || r.status != 200) return; 
        // console.log(r.responseText);
    };
    r.send("take=1");
}

/**
 * Call back function fired on AJAX result.
 */
function ajaxListener()
{
    rows = JSON.parse(this.responseText);
    populateTable(rows, paginator);
}

let tables$1 = document.getElementsByClassName("eloquent-table");
let headers = [].slice
                .call(tables$1[0].tHead.querySelectorAll("th"))
                .map(function(header) {
                    return header.innerHTML;
                });
initializeTable();
ajaxRequest();

exports.tables = tables$1;

}((this.eloquentTables = this.eloquentTables || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvaW5pdGlhbGl6ZVRhYmxlLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9wYWdpbmF0b3IuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL3BvcHVsYXRlVGFibGUuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2FqYXhSZXF1ZXN0LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnN0cnVjdCBiYXNpYyBmcmFtZXdvcmsgZm9yIGNyZWF0aW5nIGEgdGFibGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplVGFibGUoKVxue1xuICAgIGxldCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IFwidGFibGUtd3JhcHBlclwiO1xuICAgIGxldCB0YWJsZSA9IHRhYmxlc1swXTtcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZSh3cmFwcGVyLCB0YWJsZSk7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0YWJsZSk7XG5cbiAgICBwYWdpbmF0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHBhZ2luYXRvci5jbGFzc05hbWUgPSBcInBhZ2luYXRvclwiO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQocGFnaW5hdG9yKTtcbn0iLCIvKipcbiAqIEZpcmVkIG9uIEFKQVggcmVzcG9uc2UgdG8gY29uc3RydWN0IHBhZ2luYXRlZCByZXN1bHRzLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUGFnaW5hdG9yKHBhZ2luYXRvcilcbntcbiAgICBjb25zb2xlLmxvZyhcIkNvdW50OiBcIiArIHRvdGFsX2NvdW50KTtcbiAgICBwYWdpbmF0b3IuaW5uZXJIVE1MID0gdG90YWxfY291bnQ7XG59IiwiaW1wb3J0IHsgYnVpbGRQYWdpbmF0b3IgfSBmcm9tICcuL3BhZ2luYXRvci5qcyc7XG4vKipcbiAqIEFKQVggTGlzdGVuZXIgdG8gYnVpbGQgdGFibGUgd2l0aCBkYXRhIHJldHVybmVkIFxuICogZnJvbSBzZXJ2ZXIuXG4gKlxuICogQHBhcmFtICB7SnNvbn0gcGF5bG9hZCBhIHNlcnZlciByZXNwb25zZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9wdWxhdGVUYWJsZShwYXlsb2FkKVxue1xuICAgIGNvbnNvbGUubG9nKHBheWxvYWQpO1xuICAgIHBheWxvYWQuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciByb3cgPSB0YWJsZXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Rib2R5JylbMF0uaW5zZXJ0Um93KC0xKTtcbiAgICAgICAgLy8gSW5zZXJ0IG5ldyBjZWxscyAoPHRkPiBlbGVtZW50cykgYXQgdGhlIDFzdCBhbmQgMm5kIHBvc2l0aW9uIG9mIHRoZSBcIm5ld1wiIDx0cj4gZWxlbWVudDpcbiAgICAgICAgdmFyIGNlbGwxID0gcm93Lmluc2VydENlbGwoMCk7XG4gICAgICAgIHZhciBjZWxsMiA9IHJvdy5pbnNlcnRDZWxsKDEpO1xuICAgICAgICB2YXIgY2VsbDMgPSByb3cuaW5zZXJ0Q2VsbCgyKTtcbiAgICAgICAgdmFyIGNlbGw0ID0gcm93Lmluc2VydENlbGwoMyk7XG5cbiAgICAgICAgLy8gQWRkIHNvbWUgdGV4dCB0byB0aGUgbmV3IGNlbGxzOlxuICAgICAgICBjZWxsMS5pbm5lckhUTUwgPSBkYXRhLmlkO1xuICAgICAgICBjZWxsMi5pbm5lckhUTUwgPSBkYXRhLmNvbXBhbnkubmFtZTtcbiAgICAgICAgY2VsbDMuaW5uZXJIVE1MID0gZGF0YS5uYW1lO1xuICAgICAgICBjZWxsNC5pbm5lckhUTUwgPSBkYXRhLnByaWNlO1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHBhZ2luYXRvcik7XG4gICAgdG90YWxfY291bnQgPSBwYXlsb2FkLmNvdW50O1xuICAgIGJ1aWxkUGFnaW5hdG9yKCk7IFxufSIsImltcG9ydCB7IHBvcHVsYXRlVGFibGUgfSBmcm9tICcuL3BvcHVsYXRlVGFibGUuanMnXG4vKipcbiAqIEFKQVggUmVxdWVzdCB0byBzZXJ2ZXIgdG8gZ2V0IFRhYmxlIGRhdGEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhamF4UmVxdWVzdCgpXG57XG4gICAgbGV0IHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICBcbiAgICByLm9wZW4oXCJQT1NUXCIsIHRhYmxlc1swXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRhcmdldFwiKSwgdHJ1ZSk7XG4gICAgci5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1DU1JGLVRPS0VOXCIsIFwie3sgY3NyZl90b2tlbigpIH19XCIpO1xuICAgIHIuc2V0UmVxdWVzdEhlYWRlcihcInRha2VcIiwgXCIxMFwiKTtcbiAgICByLnNldFJlcXVlc3RIZWFkZXIoXCJza2lwXCIsIFwiNVwiKTtcbiAgICByLnNldFJlcXVlc3RIZWFkZXIoXCJzZWFyY2hcIiwgXCJXaXphXCIpO1xuICAgIHIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgYWpheExpc3RlbmVyKTtcbiAgICByLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHIucmVhZHlTdGF0ZSAhPSA0IHx8IHIuc3RhdHVzICE9IDIwMCkgcmV0dXJuOyBcbiAgICAgICAgLy8gY29uc29sZS5sb2coci5yZXNwb25zZVRleHQpO1xuICAgIH07XG4gICAgci5zZW5kKFwidGFrZT0xXCIpO1xufVxuXG4vKipcbiAqIENhbGwgYmFjayBmdW5jdGlvbiBmaXJlZCBvbiBBSkFYIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFqYXhMaXN0ZW5lcigpXG57XG4gICAgcm93cyA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZVRleHQpO1xuICAgIHBvcHVsYXRlVGFibGUocm93cywgcGFnaW5hdG9yKTtcbn0iLCJpbXBvcnQgeyBpbml0aWFsaXplVGFibGUgfSBmcm9tIFwiLi9tb2R1bGVzL2luaXRpYWxpemVUYWJsZVwiO1xuaW1wb3J0IHsgYWpheFJlcXVlc3QsIGFqYXhMaXN0ZW5lciB9IGZyb20gXCIuL21vZHVsZXMvYWpheFJlcXVlc3RcIjtcblxuZXhwb3J0IGxldCB0YWJsZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZWxvcXVlbnQtdGFibGVcIik7XG5sZXQgaGVhZGVycyA9IFtdLnNsaWNlXG4gICAgICAgICAgICAgICAgLmNhbGwodGFibGVzWzBdLnRIZWFkLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0aFwiKSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVhZGVyLmlubmVySFRNTDtcbiAgICAgICAgICAgICAgICB9KTtcbmxldCByb3dzID0gW107XG5sZXQgcGFnaW5hdG9yO1xubGV0IHRvdGFsX2NvdW50O1xuXG5pbml0aWFsaXplVGFibGUoKTtcbmFqYXhSZXF1ZXN0KCk7XG4iXSwibmFtZXMiOlsidGFibGVzIiwicm93cyIsInBhZ2luYXRvciIsInRvdGFsX2NvdW50Il0sIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0FBR0EsQUFBTyxTQUFTLGVBQWU7QUFDL0I7SUFDSSxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDO0lBQ3BDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7O0lBRTNCLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtB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
