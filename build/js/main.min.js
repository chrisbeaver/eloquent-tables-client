var eloquentTables = (function () {
'use strict';

var tables = document.getElementsByClassName('eloquent-table');

// export let headers = [].slice
//     .call(tables[0].tHead.querySelectorAll('th'))
//     .map(function(header) {
//         return header.innerHTML;
//     });

// export let total_count = { value: 0,
//     set: function(value) {
// 		this.value = value;
//  	}
// };

// export let rows = { 
// 	collection: null,
// 	set: function(value) {
// 		this.collection = value;
// 	}
// };

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

















var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

var Header = function () {
    function Header(elem) {
        classCallCheck(this, Header);

        this.elem = elem; // HTML Element
        this.columns = this.load();
    }

    createClass(Header, [{
        key: 'load',
        value: function load() {
            return [].slice.call(this.elem.querySelectorAll('th')).map(function (header) {
                return header.innerHTML;
            });
        }
    }]);
    return Header;
}();

var RemoteData = {
    requestData: function requestData() {

        var r = new XMLHttpRequest();
        r.requester = this;

        r.open('POST', '/products', true);
        r.setRequestHeader('X-CSRF-TOKEN', '{{ csrf_token() }}');
        r.setRequestHeader('take', '10');
        r.setRequestHeader('skip', '20');
        r.setRequestHeader('search', 'Wiza');
        r.addEventListener('load', this.handler);
        r.onreadystatechange = function () {
            if (r.readyState != 4 || r.status != 200) return;
        };
        r.send('take=1');
    },
    handler: function handler() {
        console.log('Handler fired');
        this.requester.response = JSON.parse(this.responseText);
        table.response = this.requester.response;
        console.log(this.requester); // Showing XMLHttpRequest, I want this class though.
    }
};

// import { Paginator } from './paginator';
var _class$1 = function () {
    function _class(elem) {
        classCallCheck(this, _class);

        this.table = elem; // HTML Table Element
        this.parent = this.initialize();
        this.header = this._loadHeader();
        this.data = RemoteData;
        this.data.requestData();
    }

    // load() {

    //     let r = new XMLHttpRequest();
    //     r.open('POST', this.table.getAttribute('data-target'), true);
    //     r.setRequestHeader('X-CSRF-TOKEN', '{{ csrf_token() }}');
    //     r.setRequestHeader('take', '10');
    //     r.setRequestHeader('skip', '20');
    //     r.setRequestHeader('search', 'Wiza');
    //     r.addEventListener('load', ajaxListener);
    //     r.onreadystatechange = function () {
    //         if (r.readyState != 4 || r.status != 200) return; 
    //     };
    //     r.send();

    // }

    createClass(_class, [{
        key: 'initialize',
        value: function initialize() {
            // Put wrapper around table.
            var wrapper = document.createElement('div');
            wrapper.className = 'table-wrapper';
            var table = this.table;
            table.parentElement.insertBefore(wrapper, table);
            wrapper.appendChild(table);
            return wrapper;
        }
    }, {
        key: '_loadHeader',
        value: function _loadHeader() {
            return new Header(this.table.tHead);
        }

        // set response(response) {
        //     return this.response = response;
        // }

    }]);
    return _class;
}();

var elem = tables[0];
var table = new _class$1(elem);

return table;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2dsb2JhbHMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2hlYWRlci5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvYWpheC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvdGFibGUuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgdGFibGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZWxvcXVlbnQtdGFibGUnKTtcblxuLy8gZXhwb3J0IGxldCBoZWFkZXJzID0gW10uc2xpY2Vcbi8vICAgICAuY2FsbCh0YWJsZXNbMF0udEhlYWQucXVlcnlTZWxlY3RvckFsbCgndGgnKSlcbi8vICAgICAubWFwKGZ1bmN0aW9uKGhlYWRlcikge1xuLy8gICAgICAgICByZXR1cm4gaGVhZGVyLmlubmVySFRNTDtcbi8vICAgICB9KTtcblxuLy8gZXhwb3J0IGxldCB0b3RhbF9jb3VudCA9IHsgdmFsdWU6IDAsXG4vLyAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuLy8gXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcbi8vICBcdH1cbi8vIH07XG5cbi8vIGV4cG9ydCBsZXQgcm93cyA9IHsgXG4vLyBcdGNvbGxlY3Rpb246IG51bGwsXG4vLyBcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbi8vIFx0XHR0aGlzLmNvbGxlY3Rpb24gPSB2YWx1ZTtcbi8vIFx0fVxuLy8gfTtcblxuZXhwb3J0IGxldCBjb25maWcgPSB7XG4gICAgdGFibGVSb3dzOiAxMCxcbiAgICBzZXRUYWJsZVJvd3M6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMudGFibGVSb3dzID0gdmFsdWU7IH1cbn0iLCJleHBvcnQgY2xhc3MgSGVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtKSB7XG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07ICAvLyBIVE1MIEVsZW1lbnRcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gdGhpcy5sb2FkKCk7XG4gICAgfVxuICBcbiAgICBsb2FkKCkge1xuICAgICAgICByZXR1cm4gW10uc2xpY2VcbiAgICAgICAgICAuY2FsbCh0aGlzLmVsZW0ucXVlcnlTZWxlY3RvckFsbCgndGgnKSlcbiAgICAgICAgICAubWFwKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZWFkZXIuaW5uZXJIVE1MO1xuICAgICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgdGFibGUgZnJvbSAnLi4vbWFpbic7XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICByZXF1ZXN0RGF0YSgpIHtcbiAgICAgICAgXG4gICAgICAgIGxldCByID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHIucmVxdWVzdGVyID0gdGhpcztcblxuICAgICAgICByLm9wZW4oJ1BPU1QnLCAnL3Byb2R1Y3RzJywgdHJ1ZSk7XG4gICAgICAgIHIuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGLVRPS0VOJywgJ3t7IGNzcmZfdG9rZW4oKSB9fScpO1xuICAgICAgICByLnNldFJlcXVlc3RIZWFkZXIoJ3Rha2UnLCAnMTAnKTtcbiAgICAgICAgci5zZXRSZXF1ZXN0SGVhZGVyKCdza2lwJywgJzIwJyk7XG4gICAgICAgIHIuc2V0UmVxdWVzdEhlYWRlcignc2VhcmNoJywgJ1dpemEnKTtcbiAgICAgICAgci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5oYW5kbGVyKTtcbiAgICAgICAgci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoci5yZWFkeVN0YXRlICE9IDQgfHwgci5zdGF0dXMgIT0gMjAwKSByZXR1cm47IFxuICAgICAgICB9O1xuICAgICAgICByLnNlbmQoJ3Rha2U9MScpO1xuICAgICAgICBcbiAgICB9LFxuXG4gICAgaGFuZGxlcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0hhbmRsZXIgZmlyZWQnKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ZXIucmVzcG9uc2UgPSAoSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICB0YWJsZS5yZXNwb25zZSA9IHRoaXMucmVxdWVzdGVyLnJlc3BvbnNlO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnJlcXVlc3Rlcik7ICAvLyBTaG93aW5nIFhNTEh0dHBSZXF1ZXN0LCBJIHdhbnQgdGhpcyBjbGFzcyB0aG91Z2guXG4gICAgfVxufSIsIi8vIGltcG9ydCB7IFBhZ2luYXRvciB9IGZyb20gJy4vcGFnaW5hdG9yJztcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gJy4vaGVhZGVyJztcbmltcG9ydCBSZW1vdGVEYXRhIGZyb20gJy4vYWpheCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtKSB7XG4gICAgICAgIHRoaXMudGFibGUgPSBlbGVtOyAgLy8gSFRNTCBUYWJsZSBFbGVtZW50XG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5pbml0aWFsaXplKCk7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gdGhpcy5fbG9hZEhlYWRlcigpO1xuICAgICAgICB0aGlzLmRhdGEgPSBSZW1vdGVEYXRhO1xuICAgICAgICB0aGlzLmRhdGEucmVxdWVzdERhdGEoKTtcbiAgICB9XG4gIFxuICAgIC8vIGxvYWQoKSB7XG4gICAgICAgIFxuICAgIC8vICAgICBsZXQgciA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIC8vICAgICByLm9wZW4oJ1BPU1QnLCB0aGlzLnRhYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKSwgdHJ1ZSk7XG4gICAgLy8gICAgIHIuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGLVRPS0VOJywgJ3t7IGNzcmZfdG9rZW4oKSB9fScpO1xuICAgIC8vICAgICByLnNldFJlcXVlc3RIZWFkZXIoJ3Rha2UnLCAnMTAnKTtcbiAgICAvLyAgICAgci5zZXRSZXF1ZXN0SGVhZGVyKCdza2lwJywgJzIwJyk7XG4gICAgLy8gICAgIHIuc2V0UmVxdWVzdEhlYWRlcignc2VhcmNoJywgJ1dpemEnKTtcbiAgICAvLyAgICAgci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgYWpheExpc3RlbmVyKTtcbiAgICAvLyAgICAgci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gICAgICAgICBpZiAoci5yZWFkeVN0YXRlICE9IDQgfHwgci5zdGF0dXMgIT0gMjAwKSByZXR1cm47IFxuICAgIC8vICAgICB9O1xuICAgIC8vICAgICByLnNlbmQoKTtcblxuICAgIC8vIH1cbiAgICBcbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICAvLyBQdXQgd3JhcHBlciBhcm91bmQgdGFibGUuXG4gICAgICAgIGxldCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gJ3RhYmxlLXdyYXBwZXInO1xuICAgICAgICBsZXQgdGFibGUgPSB0aGlzLnRhYmxlO1xuICAgICAgICB0YWJsZS5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZSh3cmFwcGVyLCB0YWJsZSk7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodGFibGUpO1xuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICBfbG9hZEhlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIZWFkZXIodGhpcy50YWJsZS50SGVhZCk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgLy8gICAgIHJldHVybiB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgLy8gfVxufSIsImltcG9ydCB7IHRhYmxlcyB9IGZyb20gJy4vZ2xvYmFscyc7XG5pbXBvcnQgVGFibGUgZnJvbSAnLi9tb2R1bGVzL3RhYmxlJztcblxubGV0IGVsZW0gPSB0YWJsZXNbMF07XG5sZXQgdGFibGUgPSBuZXcgVGFibGUoZWxlbSk7XG4vLyB0YWJsZS5sb2FkKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHRhYmxlO1xuIl0sIm5hbWVzIjpbInRhYmxlcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIkhlYWRlciIsImVsZW0iLCJjb2x1bW5zIiwibG9hZCIsInNsaWNlIiwiY2FsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXAiLCJoZWFkZXIiLCJpbm5lckhUTUwiLCJyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0ZXIiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInNlbmQiLCJsb2ciLCJyZXNwb25zZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInRhYmxlIiwicGFyZW50IiwiaW5pdGlhbGl6ZSIsIl9sb2FkSGVhZGVyIiwiZGF0YSIsIlJlbW90ZURhdGEiLCJyZXF1ZXN0RGF0YSIsIndyYXBwZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwicGFyZW50RWxlbWVudCIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwidEhlYWQiLCJUYWJsZSJdLCJtYXBwaW5ncyI6Ijs7O0FBQU8sSUFBSUEsU0FBU0MsU0FBU0Msc0JBQVQsQ0FBZ0MsZ0JBQWhDLENBQWI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FxQlAsQUFBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUNyQk1DLE1BQWI7b0JBQ2dCQyxJQUFaLEVBQWtCOzs7YUFDVEEsSUFBTCxHQUFZQSxJQUFaLENBRGM7YUFFVEMsT0FBTCxHQUFlLEtBQUtDLElBQUwsRUFBZjs7Ozs7K0JBR0c7bUJBQ0ksR0FBR0MsS0FBSCxDQUNKQyxJQURJLENBQ0MsS0FBS0osSUFBTCxDQUFVSyxnQkFBVixDQUEyQixJQUEzQixDQURELEVBRUpDLEdBRkksQ0FFQSxVQUFTQyxNQUFULEVBQWlCO3VCQUNUQSxPQUFPQyxTQUFkO2FBSEQsQ0FBUDs7Ozs7O0FDTlIsaUJBQWU7ZUFBQSx5QkFFRzs7WUFFTkMsSUFBSSxJQUFJQyxjQUFKLEVBQVI7VUFDRUMsU0FBRixHQUFjLElBQWQ7O1VBRUVDLElBQUYsQ0FBTyxNQUFQLEVBQWUsV0FBZixFQUE0QixJQUE1QjtVQUNFQyxnQkFBRixDQUFtQixjQUFuQixFQUFtQyxvQkFBbkM7VUFDRUEsZ0JBQUYsQ0FBbUIsTUFBbkIsRUFBMkIsSUFBM0I7VUFDRUEsZ0JBQUYsQ0FBbUIsTUFBbkIsRUFBMkIsSUFBM0I7VUFDRUEsZ0JBQUYsQ0FBbUIsUUFBbkIsRUFBNkIsTUFBN0I7VUFDRUMsZ0JBQUYsQ0FBbUIsTUFBbkIsRUFBMkIsS0FBS0MsT0FBaEM7VUFDRUMsa0JBQUYsR0FBdUIsWUFBWTtnQkFDM0JQLEVBQUVRLFVBQUYsSUFBZ0IsQ0FBaEIsSUFBcUJSLEVBQUVTLE1BQUYsSUFBWSxHQUFyQyxFQUEwQztTQUQ5QztVQUdFQyxJQUFGLENBQU8sUUFBUDtLQWhCTztXQUFBLHFCQW9CRDtnQkFDRUMsR0FBUixDQUFZLGVBQVo7YUFDS1QsU0FBTCxDQUFlVSxRQUFmLEdBQTJCQyxLQUFLQyxLQUFMLENBQVcsS0FBS0MsWUFBaEIsQ0FBM0I7Y0FDTUgsUUFBTixHQUFpQixLQUFLVixTQUFMLENBQWVVLFFBQWhDO2dCQUNRRCxHQUFSLENBQVksS0FBS1QsU0FBakIsRUFKTTs7Q0FwQmQ7O0FDREE7QUFDQSxBQUNBO29CQUdnQlgsSUFBWixFQUFrQjs7O2FBQ1R5QixLQUFMLEdBQWF6QixJQUFiLENBRGM7YUFFVDBCLE1BQUwsR0FBYyxLQUFLQyxVQUFMLEVBQWQ7YUFDS3BCLE1BQUwsR0FBYyxLQUFLcUIsV0FBTCxFQUFkO2FBQ0tDLElBQUwsR0FBWUMsVUFBWjthQUNLRCxJQUFMLENBQVVFLFdBQVY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0FtQlM7O2dCQUVMQyxVQUFVbkMsU0FBU29DLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZDtvQkFDUUMsU0FBUixHQUFvQixlQUFwQjtnQkFDSVQsUUFBUSxLQUFLQSxLQUFqQjtrQkFDTVUsYUFBTixDQUFvQkMsWUFBcEIsQ0FBaUNKLE9BQWpDLEVBQTBDUCxLQUExQztvQkFDUVksV0FBUixDQUFvQlosS0FBcEI7bUJBQ09PLE9BQVA7Ozs7c0NBR1U7bUJBQ0gsSUFBSWpDLE1BQUosQ0FBVyxLQUFLMEIsS0FBTCxDQUFXYSxLQUF0QixDQUFQOzs7Ozs7Ozs7OztBQ3JDUixJQUFJdEMsT0FBT0osT0FBTyxDQUFQLENBQVg7QUFDQSxJQUFJNkIsUUFBUSxJQUFJYyxRQUFKLENBQVV2QyxJQUFWLENBQVosQ0FDQTs7OzsifQ==
