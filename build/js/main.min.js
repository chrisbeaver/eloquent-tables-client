(function () {
'use strict';

let tables = document.getElementsByClassName("eloquent-table");
let headers = [].slice
                .call(tables[0].tHead.querySelectorAll("th"))
                .map(function(header) {
                    return header.innerHTML;
                });
let paginator = document.createElement("div");
let total_count = { value: 0,
						   set: function(value) {
							this.value = value;
						 	}
						 };
let rows = { collection: null,
					set: function(value) {
						this.collection = value;
					}};

/**
 * Construct basic framework for creating a table.
 */
function initializeTable()
{
    let wrapper = document.createElement("div");
    wrapper.className = "table-wrapper";
    let table = tables[0];
    
    document.body.insertBefore(wrapper, table);
    wrapper.appendChild(table);

    // paginator = document.createElement("div");
    paginator.className = "paginator";
    wrapper.appendChild(paginator);
}

/**
 * Fired on AJAX response to construct paginated results.
 *
 */
function buildPaginator()
{
    console.log("Count: " + total_count);
    paginator.innerHTML = total_count.value;
}

/**
 * AJAX Listener to build table with data returned 
 * from server.
 *
 * @param  {Json} payload a server response
 */
function populateTable(payload)
{
    console.log(tables);
    payload.data.forEach(function(data) {
        
        var row = tables[0].getElementsByTagName('tbody')[0].insertRow(-1);
        // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell(3);

        // Add some text to the new cells:
        cell1.innerHTML = data.id;
        cell2.innerHTML = data.company.name;
        cell3.innerHTML = data.name;
        cell4.innerHTML = data.price;
    });
    console.log(paginator);
    total_count.set(payload.count);
    buildPaginator(); 
}

/**
 * AJAX Request to server to get Table data.
 */
function ajaxRequest()
{
    let r = new XMLHttpRequest();
    
    r.open("POST", tables[0].getAttribute("data-target"), true);
    r.setRequestHeader("X-CSRF-TOKEN", "{{ csrf_token() }}");
    r.setRequestHeader("take", "10");
    r.setRequestHeader("skip", "5");
    r.setRequestHeader("search", "Wiza");
    r.addEventListener("load", ajaxListener);
    r.onreadystatechange = function () {
        if (r.readyState != 4 || r.status != 200) return; 
        // console.log(r.responseText);
    };
    r.send("take=1");
}

/**
 * Call back function fired on AJAX result.
 */
function ajaxListener()
{
    // console.log(JSON.parse(this.responseText));
    rows.set(JSON.parse(this.responseText));
    console.log(rows.collection);
    populateTable(rows.collection);
}

initializeTable();
ajaxRequest();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
